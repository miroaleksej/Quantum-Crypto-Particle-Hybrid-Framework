import numpy as np
import matplotlib.pyplot as plt
from ripser import ripser
from scipy.fft import fft
from typing import List, Dict, Any, Tuple, Optional
import hashlib


class CryptoAnomalyDetector:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Quantum-Crypto-Particle Hybrid Framework (QCPH v1.1)
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è:
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞ –≤ —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ECDSA
    - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π —á–µ—Ä–µ–∑ DFT –∏ —Ç–æ–ø–æ–ª–æ–≥–∏—é
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π
    """
    def __init__(self, n_events: int = 500, n: int = 256):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π

        Args:
            n_events: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            n: –ü–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø–ø—ã —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–π –∫—Ä–∏–≤–æ–π (–¥–ª—è mod n)
        """
        self.n_events = n_events
        self.n = n  # –ü–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø–ø—ã ECDSA
        self.events = []  # –°—ã—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞
        self.ur_uz_list = []  # –†–µ–∑—É–ª—å—Ç–∞—Ç œà(e) = (u_r, u_z)
        self.d_phys_list = []  # –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ d_phys(e)
        self.betti_numbers = None
        self.anomaly_score = None
        self.topological_entropy = None
        self.curve_length = None
        self.crypto_key = None

    def _spherical_coords(self, px: float, py: float, pz: float) -> Tuple[float, float]:
        """
        –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–∫–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–º–ø—É–ª—å—Å–∞ –≤ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ (Œ∏, œÜ)

        Args:
            px, py, pz: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø—É–ª—å—Å–∞

        Returns:
            Œ∏ (–∞–∑–∏–º—É—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª), œÜ (–ø–æ–ª—è—Ä–Ω—ã–π —É–≥–æ–ª)
        """
        r = np.sqrt(px**2 + py**2 + pz**2)
        if r == 0:
            return 0.0, 0.0
        theta = np.arctan2(py, px)  # –æ—Ç 0 –¥–æ 2œÄ
        phi = np.arccos(pz / r)     # –æ—Ç 0 –¥–æ œÄ
        return theta, phi

    def generate_sample_events(self) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π: [{'particles': [{'px', 'py', 'pz', 'E'}, ...]}, ...]
        """
        sample_events = []
        for _ in range(self.n_events):
            k = np.random.randint(3, 8)  # —á–∏—Å–ª–æ —á–∞—Å—Ç–∏—Ü
            particles = []
            total_E = 0.0
            for _ in range(k):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã
                px = np.random.normal(0, 10)
                py = np.random.normal(0, 10)
                pz = np.random.normal(0, 15)
                E = np.random.uniform(5, 50)
                total_E += E
                theta, phi = self._spherical_coords(px, py, pz)
                particles.append({'px': px, 'py': py, 'pz': pz, 'E': E, 'theta': theta, 'phi': phi})
            sample_events.append({'particles': particles, 'total_E': total_E})
        self.events = sample_events
        return sample_events

    def compute_ur_uz(self, event: Dict) -> Tuple[float, float]:
        """
        –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è œà: M ‚Üí T
        œà(e) = (u_r(e), u_z(e)) —Å–æ–≥–ª–∞—Å–Ω–æ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é 1.3

        Args:
            event: —Å–æ–±—ã—Ç–∏–µ —Å —á–∞—Å—Ç–∏—Ü–∞–º–∏

        Returns:
            (u_r, u_z) mod n
        """
        total_E = event['total_E']
        particles = event['particles']

        ur = 0.0
        uz = 0.0
        for p in particles:
            ur += p['E'] * p['theta']
            uz += p['E'] * p['phi']

        ur = (ur / total_E) % self.n
        uz = (uz / total_E) % self.n
        return ur, uz

    def compute_d_phys(self, ur: float, uz: float, r: float = 0.3, R: float = 0.8) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ d_phys –ø–æ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é 2.2:
        d_phys = - (‚àÇr/‚àÇu_z) * (‚àÇr/‚àÇu_r)^{-1} mod n

        –ó–¥–µ—Å—å r(u_r, u_z) - —Ä–∞–¥–∏—É—Å —Ç–æ—Ä–∞ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
        –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–∞:
        x = (R + r*cos(u_z)) * cos(u_r)
        y = (R + r*cos(u_z)) * sin(u_r)
        z = r*sin(u_z)

        –¢–æ–≥–¥–∞ "—Ä–∞–¥–∏—É—Å" –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: r(u_r, u_z) = sqrt(x^2 + y^2) = R + r*cos(u_z)

        –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:
        ‚àÇr/‚àÇu_r = 0
        ‚àÇr/‚àÇu_z = -r*sin(u_z)

        –ù–æ —ç—Ç–æ –≤—ã—Ä–æ–∂–¥–µ–Ω–∏–µ. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–æ–±—â—ë–Ω–Ω—É—é –º–æ–¥–µ–ª—å:
        –ü—É—Å—Ç—å r(u_r, u_z) = R + r * cos(u_z - d*u_r)  # –∫–∞–∫ –≤ –¥–∏–Ω–∞–º–∏–∫–µ T(u_r, u_z) = (u_r, u_z + d)

        –¢–æ–≥–¥–∞:
        ‚àÇr/‚àÇu_r = r * d * sin(u_z - d*u_r)
        ‚àÇr/‚àÇu_z = -r * sin(u_z - d*u_r)

        => d_phys = - (‚àÇr/‚àÇu_z) / (‚àÇr/‚àÇu_r) = - (-r sin(...)) / (r d sin(...)) = 1/d
        => d = 1 / d_phys

        –ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ d_phys ‚âà d, –∏ –æ—Ü–µ–Ω–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —á–∏—Å–ª–µ–Ω–Ω–æ.

        –û–¥–Ω–∞–∫–æ –ø–æ –º–æ–¥–µ–ª–∏: d_phys ‚Äî —ç—Ç–æ **–∞–Ω–∞–ª–æ–≥ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞**, –ø–æ—ç—Ç–æ–º—É –º—ã –æ—Ü–µ–Ω–∏–≤–∞–µ–º –µ–≥–æ
        –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö.

        –í –¥–∞–Ω–Ω–æ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ: —Ä–µ–∞–ª–∏–∑—É–µ–º —á–∏—Å–ª–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö
        –Ω–∞ —Å–µ—Ç–∫–µ (u_r, u_z), —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å d_phys.

        –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ r(u_r, u_z) = R + r * cos(u_z - d_true * u_r)
        –∏ –æ—Ü–µ–Ω–∏–º d_phys —á–µ—Ä–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤.
        """
        # –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è r(u_r, u_z) –∫–∞–∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –æ—Å–∏ z
        # r = sqrt(x^2 + y^2) = R + r * cos(u_z - d * u_r)
        # –ú—ã –Ω–µ –∑–Ω–∞–µ–º d, –Ω–æ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —á–∏—Å–ª–µ–Ω–Ω–æ

        delta = 1e-5

        # r(u_r, u_z)
        r0 = R + r * np.cos(uz - 1.0 * ur)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º d=1 –¥–ª—è –º–∞—Å—à—Ç–∞–±–∞

        # ‚àÇr/‚àÇu_r
        r_ur_plus = R + r * np.cos(uz - 1.0 * (ur + delta))
        r_ur_minus = R + r * np.cos(uz - 1.0 * (ur - delta))
        dr_dur = (r_ur_plus - r_ur_minus) / (2 * delta)

        # ‚àÇr/‚àÇu_z
        r_uz_plus = R + r * np.cos((uz + delta) - 1.0 * ur)
        r_uz_minus = R + r * np.cos((uz - delta) - 1.0 * ur)
        dr_duz = (r_uz_plus - r_uz_minus) / (2 * delta)

        if abs(dr_dur) < 1e-8:
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            d_phys = 0.0
        else:
            d_phys = - dr_duz / dr_dur

        d_phys = d_phys % self.n
        return d_phys

    def map_events_to_torus(self) -> List[Tuple[float, float]]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç œà –∫–æ –≤—Å–µ–º —Å–æ–±—ã—Ç–∏—è–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç (u_r, u_z)

        Returns:
            –°–ø–∏—Å–æ–∫ (u_r, u_z)
        """
        self.ur_uz_list = []
        self.d_phys_list = []

        for event in self.events:
            ur, uz = self.compute_ur_uz(event)
            d_phys = self.compute_d_phys(ur, uz)
            self.ur_uz_list.append((ur, uz))
            self.d_phys_list.append(d_phys)

        return self.ur_uz_list

    def compute_betti_numbers(self) -> Tuple[int, int, int]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —á–∏—Å–ª–∞ –ë–µ—Ç—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –≥–æ–º–æ–ª–æ–≥–∏–∏.
        –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: b‚ÇÄ = —á–∏—Å–ª–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∂–∏–≤—É—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ H‚ÇÄ

        Returns:
            (b‚ÇÄ, b‚ÇÅ, b‚ÇÇ)
        """
        if not self.ur_uz_list:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ map_events_to_torus()")

        data = np.array(self.ur_uz_list)  # (N, 2) ‚Äî —Ç–æ—á–∫–∏ –Ω–∞ —Ç–æ—Ä–µ

        result = ripser(data, maxdim=2)
        dgms = result['dgms']

        # b‚ÇÄ: —á–∏—Å–ª–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, —É –∫–æ—Ç–æ—Ä—ã—Ö death = ‚àû
        betti_0 = np.sum(dgms[0][:, 1] == np.inf)

        # b‚ÇÅ: —á–∏—Å–ª–æ 1-—Ü–∏–∫–ª–æ–≤, –∂–∏–≤—É—â–∏—Ö –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        betti_1 = np.sum(dgms[1][:, 1] == np.inf)

        # b‚ÇÇ: —á–∏—Å–ª–æ 2-–ø–æ–ª–æ—Å—Ç–µ–π
        betti_2 = np.sum(dgms[2][:, 1] == np.inf) if len(dgms) > 2 else 0

        self.betti_numbers = (betti_0, betti_1, betti_2)
        return self.betti_numbers

    def detect_anomaly_dft(self, bin_size: int = 50, k_max: int = 10) -> float:
        """
        DFT-–∞–Ω–∞–ª–∏–∑ –ø–æ –¢–µ–æ—Ä–µ–º–µ 3.2 –∏ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é 3.3

        Args:
            bin_size: —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ u_r
            k_max: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è

        Returns:
            –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞–Ω–æ–º–∞–ª–∏–∏ ùíú
        """
        if not self.ur_uz_list:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ map_events_to_torus()")

        ur_vals = np.array([p[0] for p in self.ur_uz_list])
        uz_vals = np.array([p[1] for p in self.ur_uz_list])

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ u_r
        sorted_indices = np.argsort(ur_vals)
        ur_sorted = ur_vals[sorted_indices]
        uz_sorted = uz_vals[sorted_indices]

        # –ë–∏–Ω–∏–º –ø–æ u_r
        u_r_min, u_r_max = ur_sorted.min(), ur_sorted.max()
        bin_edges = np.linspace(u_r_min, u_r_max, num=bin_size + 1)
        A = 0.0
        count = 0

        for i in range(bin_size - 1):
            mask = (ur_sorted >= bin_edges[i]) & (ur_sorted < bin_edges[i + 1])
            uz_bin = uz_sorted[mask]
            if len(uz_bin) < 2:
                continue

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º uz –≤ [0, n)
            uz_normalized = uz_bin % self.n
            # –î–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è uz
            hist, bin_edges_uz = np.histogram(uz_normalized, bins=self.n, range=(0, self.n))
            f = hist.astype(float)
            f_hat = fft(f)

            # –°–ª–µ–¥—É—é—â–∏–π –±–∏–Ω
            mask_next = (ur_sorted >= bin_edges[i + 1]) & (ur_sorted < bin_edges[i + 2])
            uz_next = uz_sorted[mask_next]
            if len(uz_next) < 2:
                continue

            uz_next_norm = uz_next % self.n
            hist_next, _ = np.histogram(uz_next_norm, bins=self.n, range=(0, self.n))
            f_next = hist_next.astype(float)
            f_next_hat = fft(f_next)

            # –°—Ä–µ–¥–Ω–∏–π d_phys –¥–ª—è –±–∏–Ω–æ–≤
            d_phys_avg = np.mean(self.d_phys_list)

            # –í—ã—á–∏—Å–ª—è–µ–º ùíú –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∫ k=1..k_max
            for k in range(1, min(k_max + 1, self.n // 2)):
                if abs(f_hat[k]) < 1e-10 or abs(f_next_hat[k]) < 1e-10:
                    continue
                ratio = f_next_hat[k] / f_hat[k]
                expected = np.exp(-2j * np.pi * k * d_phys_avg / self.n)
                A += abs(ratio - expected)**2
                count += 1

        if count == 0:
            return 0.0

        self.anomaly_score = A / count
        return self.anomaly_score

    def compute_topological_entropy(self) -> float:
        """
        –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è –ø–æ –¢–µ–æ—Ä–µ–º–µ 2.3
        h_top = log(max(1, |d_phys|))

        –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ d_phys
        """
        if not self.d_phys_list:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ map_events_to_torus()")

        d_avg = np.mean(np.abs(self.d_phys_list))
        self.topological_entropy = np.log(max(1, d_avg))
        return self.topological_entropy

    def compute_curve_length(self) -> float:
        """
        –î–ª–∏–Ω–∞ –∫—Ä–∏–≤–æ–π –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ (u_r, u_z)
        """
        if not self.ur_uz_list:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ map_events_to_torus()")

        points = np.array(self.ur_uz_list)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ u_r
        sorted_idx = np.argsort(points[:, 0])
        sorted_points = points[sorted_idx]

        L = 0.0
        for i in range(len(sorted_points) - 1):
            du_r = sorted_points[i + 1, 0] - sorted_points[i, 0]
            du_z = sorted_points[i + 1, 1] - sorted_points[i, 1]
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ø–æ–ª–æ–≥–∏—é —Ç–æ—Ä–∞
            du_r = min(abs(du_r), self.n - abs(du_r))
            du_z = min(abs(du_z), self.n - abs(du_z))
            L += np.sqrt(du_r**2 + du_z**2)

        self.curve_length = L
        return L

    def analyze_asymptotic_curve_length(self, d_values: List[float]) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –∞—Å–∏–º–ø—Ç–æ—Ç–∏–∫–∏ L(d) ~ C ln d
        """
        L_values = []
        for d_val in d_values:
            # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º d
            ur = np.linspace(0, self.n, self.n_events)
            uz = (ur * d_val) % self.n
            points = np.array([(u, z) for u, z in zip(ur, uz)])
            L = 0
            for i in range(len(points) - 1):
                du = points[i + 1][0] - points[i][0]
                dz = points[i + 1][1] - points[i][1]
                dz = min(abs(dz), self.n - abs(dz))
                L += np.sqrt(du**2 + dz**2)
            L_values.append(L)

        log_d = np.log(np.array(d_values) + 1e-8)
        coeffs = np.polyfit(log_d, L_values, 1)
        C, b = coeffs
        r2 = np.corrcoef(log_d, L_values)[0, 1]**2

        return {
            "C": float(C),
            "intercept": float(b),
            "r_squared": float(r2),
            "d_values": d_values,
            "L_values": L_values,
            "log_d_values": log_d.tolist()
        }

    def generate_crypto_key(self) -> str:
        """
        –ê–ª–≥–æ—Ä–∏—Ç–º 5.3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞

        d_crypto = Hash( sum_{i=1}^m k_i * d_phys(e_i) mod n )
        –≥–¥–µ k_i = u_z,i + u_r,i * d_phys(e_i) mod n
        """
        if not self.ur_uz_list or not self.d_phys_list:
            raise ValueError("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ map_events_to_torus()")

        total = 0
        for (ur, uz), d_phys in zip(self.ur_uz_list, self.d_phys_list):
            k_i = (uz + ur * d_phys) % self.n
            term = (k_i * d_phys) % self.n
            total = (total + term) % self.n

        self.crypto_key = hashlib.sha256(str(total).encode()).hexdigest()
        return self.crypto_key

    def run_full_analysis(self) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –æ—Ç —Å–æ–±—ã—Ç–∏–π –¥–æ –∫–ª—é—á–∞
        """
        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
        self.generate_sample_events()

        # 2. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–æ—Ä
        self.map_events_to_torus()

        # 3. –¢–æ–ø–æ–ª–æ–≥–∏—è
        betti = self.compute_betti_numbers()

        # 4. DFT-–∞–Ω–∞–ª–∏–∑
        anomaly_score = self.detect_anomaly_dft()

        # 5. –≠–Ω—Ç—Ä–æ–ø–∏—è
        h_top = self.compute_topological_entropy()

        # 6. –î–ª–∏–Ω–∞ –∫—Ä–∏–≤–æ–π
        curve_length = self.compute_curve_length()

        # 7. –ê—Å–∏–º–ø—Ç–æ—Ç–∏–∫–∞
        asymptotic = self.analyze_asymptotic_curve_length(
            d_values=[0.5, 1.0, 2.0, 4.0, 8.0, 16.0]
        )

        # 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
        key = self.generate_crypto_key()

        # 9. –ö—Ä–∏—Ç–µ—Ä–∏–π –∞–Ω–æ–º–∞–ª–∏–∏
        threshold = np.sqrt(self.n) / 2
        is_anomaly = anomaly_score > threshold

        results = {
            "n_events": self.n_events,
            "n": self.n,
            "betti_numbers": betti,
            "anomaly_score": float(anomaly_score),
            "anomaly_threshold": float(threshold),
            "is_anomaly": is_anomaly,
            "topological_entropy": float(h_top),
            "curve_length": float(curve_length),
            "asymptotic_analysis": asymptotic,
            "crypto_key": key
        }

        return results

    def visualize_results(self, results: Dict[str, Any], save_path: Optional[str] = None):
        """
        –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        ur_vals = [p[0] for p in self.ur_uz_list]
        uz_vals = [p[1] for p in self.ur_uz_list]

        plt.figure(figsize=(16, 12))

        # 1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ç–æ—Ä–µ
        plt.subplot(2, 3, 1)
        plt.scatter(ur_vals, uz_vals, c='blue', s=10, alpha=0.7)
        plt.xlabel('$u_r$')
        plt.ylabel('$u_z$')
        plt.title('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ œà(e) –Ω–∞ —Ç–æ—Ä–µ $\\mathbb{S}^1 \\times \\mathbb{S}^1$')
        plt.grid(True, alpha=0.3)

        # 2. –ß–∏—Å–ª–∞ –ë–µ—Ç—Ç–∏
        plt.subplot(2, 3, 2)
        labels = ['Œ≤‚ÇÄ', 'Œ≤‚ÇÅ', 'Œ≤‚ÇÇ']
        values = results['betti_numbers']
        plt.bar(labels, values, color=['green', 'orange', 'red'])
        plt.title('–ß–∏—Å–ª–∞ –ë–µ—Ç—Ç–∏')
        for i, v in enumerate(values):
            plt.text(i, v + 0.05, str(v), ha='center')

        # 3. DFT-–∞–Ω–∞–ª–∏–∑
        plt.subplot(2, 3, 3)
        score = results['anomaly_score']
        thresh = results['anomaly_threshold']
        plt.bar(['Anomaly Score'], [score], color='red', alpha=0.7)
        plt.axhline(y=thresh, color='black', linestyle='--', label=f'Threshold = {thresh:.2f}')
        plt.title('–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞–Ω–æ–º–∞–ª–∏–∏ $\\mathcal{{A}} = {0:.3f}$'.format(score))
        plt.legend()
        plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ')

        # 4. –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è
        plt.subplot(2, 3, 4)
        h_top = results['topological_entropy']
        plt.text(0.5, 0.5, f'h_top = {h_top:.3f}',
                 fontsize=16, ha='center', va='center', bbox=dict(boxstyle="round", facecolor="wheat"))
        plt.xlim(0, 1)
        plt.ylim(0, 1)
        plt.title('–¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è')
        plt.axis('off')

        # 5. –ê—Å–∏–º–ø—Ç–æ—Ç–∏–∫–∞
        plt.subplot(2, 3, 5)
        asymptotic = results['asymptotic_analysis']
        plt.scatter(asymptotic['log_d_values'], asymptotic['L_values'], color='green')
        x = np.array(asymptotic['log_d_values'])
        y_fit = asymptotic['C'] * x + asymptotic['intercept']
        plt.plot(x, y_fit, 'r-', label=f'L = {asymptotic["C"]:.2f}¬∑ln(d) + {asymptotic["intercept"]:.2f}')
        plt.xlabel('ln(d)')
        plt.ylabel('L(d)')
        plt.title(f'–ê—Å–∏–º–ø—Ç–æ—Ç–∏–∫–∞ (R¬≤ = {asymptotic["r_squared"]:.3f})')
        plt.legend()

        # 6. –ö–ª—é—á (—Ö—ç—à)
        plt.subplot(2, 3, 6)
        key_short = results['crypto_key'][:16]
        plt.text(0.5, 0.5, f'Crypto Key:\n{key_short}...', fontsize=12,
                 ha='center', va='center', family='monospace', bbox=dict(facecolor='lightgray'))
        plt.axis('off')
        plt.title('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á')

        plt.tight_layout()
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {save_path}")
        else:
            plt.show()


def main():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã QCPH v1.1
    """
    print("=" * 80)
    print("Quantum-Crypto-Particle Hybrid Framework (QCPH v1.1) - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 80)

    detector = CryptoAnomalyDetector(n_events=500, n=256)
    results = detector.run_full_analysis()

    print("\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("-" * 50)
    print(f"–ß–∏—Å–ª–∞ –ë–µ—Ç—Ç–∏: Œ≤‚ÇÄ={results['betti_numbers'][0]}, Œ≤‚ÇÅ={results['betti_numbers'][1]}, Œ≤‚ÇÇ={results['betti_numbers'][2]}")
    print(f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –∞–Ω–æ–º–∞–ª–∏–∏ ùíú = {results['anomaly_score']:.4f}")
    print(f"–ü–æ—Ä–æ–≥ (sqrt(n)/2) = {results['anomaly_threshold']:.4f}")
    print(f"–ê–Ω–æ–º–∞–ª–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {results['is_anomaly']}")
    print(f"–¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è = {results['topological_entropy']:.4f}")
    print(f"–î–ª–∏–Ω–∞ –∫—Ä–∏–≤–æ–π = {results['curve_length']:.4f}")
    print(f"–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–ª—é—á: {results['crypto_key']}")

    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    detector.visualize_results(results)

    print("\n–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("-" * 50)
    if results['is_anomaly']:
        print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —è–≤–ª–µ–Ω–∏—è.")
    else:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏.")
    print("üîë –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π.")
    print("\nQCPH v1.1 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
    print("=" * 80)


if __name__ == "__main__":
    main()
